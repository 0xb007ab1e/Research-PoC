replicaCount: 2

image:
  repository: gcr.io/your-project/auth-service
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []

nameOverride: ""

fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podLabels: {}

podSecurityContext:
  runAsUser: 1000
  runAsGroup: 1000
  fsGroup: 1000
  runAsNonRoot: true
  readOnlyRootFilesystem: true

securityContext:
  capabilities:
    drop:
      - ALL
  allowPrivilegeEscalation: false
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000
  readOnlyRootFilesystem: true

service:
  type: ClusterIP
  port: 8443
  targetPort: 8443
  # Enable TLS
  tls:
    enabled: true
    secretName: auth-service-tls

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: auth-service.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 200m
    memory: 256Mi

# Horizontal Pod Autoscaler configuration
autoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80

# PodDisruptionBudget configuration
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Vault Agent configuration
vault:
  enabled: true
  agent:
    image: "vault:1.15.2"
    role: "auth-service"
    serviceAccount: "auth-service"
    templates:
      - name: "db-credentials" 
        path: "/vault/secrets/db-credentials"
        template: |
          {{ with secret "database/creds/auth-service" }}
          export DB_USERNAME="{{ .Data.username }}"
          export DB_PASSWORD="{{ .Data.password }}"
          {{ end }}
      - name: "jwt-secrets"
        path: "/vault/secrets/jwt-secrets"
        template: |
          {{ with secret "secret/data/auth-service/jwt" }}
          export JWT_SECRET="{{ .Data.data.secret }}"
          export JWT_ISSUER="{{ .Data.data.issuer }}"
          {{ end }}
    resources:
      requests:
        cpu: "100m"
        memory: "128Mi"
      limits:
        cpu: "200m"
        memory: "256Mi"

nodeSelector: {}

tolerations: []

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - auth-service
        topologyKey: kubernetes.io/hostname

# TLS Certificate configuration
tls:
  enabled: true
  # Secret containing TLS certificate and key
  secretName: auth-service-tls
  # CA certificate secret
  caSecretName: mcp-ca-cert
  # Mount path for certificates
  mountPath: /etc/certs
  # Enable mutual TLS
  mutualTLS: true

# mTLS (Mutual TLS) Configuration
mtls:
  enabled: true
  # Enforce mTLS for all service-to-service communication
  enforce: true
  # Client certificate secret for outbound connections
  clientCertSecret: mcp-client-cert
  # Trusted CA certificates for client verification
  trustedCAs:
    - mcp-ca-cert
    - vault-ca-cert
  # Certificate verification mode: strict, permissive, or disabled
  verificationMode: "strict"
  # Minimum TLS version
  minTlsVersion: "1.2"
  # Allowed cipher suites (empty means use defaults)
  cipherSuites: []
  # Certificate rotation settings
  rotation:
    # Enable automatic certificate rotation
    enabled: true
    # Rotation check interval (in hours)
    checkInterval: 24
    # Rotate when certificate expires in X days
    renewBefore: 30

# Additional environment variables
extraEnv:
  - name: GO_ENV
    value: "production"
  - name: LOG_LEVEL
    value: "INFO"
  - name: LOG_FORMAT
    value: "json"
  - name: ENABLE_TELEMETRY
    value: "true"
  - name: ENABLE_METRICS
    value: "true"
  - name: JWT_EXPIRY_HOURS
    value: "24"
  # TLS Configuration
  - name: ENABLE_TLS
    value: "true"
  - name: ENABLE_MTLS
    value: "true"
  - name: TLS_CERT_FILE
    value: "/etc/certs/tls.crt"
  - name: TLS_KEY_FILE
    value: "/etc/certs/tls.key"
  - name: TLS_CA_FILE
    value: "/etc/certs/ca-cert.pem"
  - name: REQUESTS_CA_BUNDLE
    value: "/etc/certs/ca-cert.pem"

# Network Policy configuration
networkPolicy:
  enabled: true
  ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: default
      ports:
      - protocol: TCP
        port: 8080
  egress:
    - to:
      - namespaceSelector:
          matchLabels:
            name: vault-system
      ports:
      - protocol: TCP
        port: 8200
    - to: []
      ports:
      - protocol: TCP
        port: 5432  # PostgreSQL
      - protocol: TCP
        port: 53    # DNS
      - protocol: UDP
        port: 53    # DNS
