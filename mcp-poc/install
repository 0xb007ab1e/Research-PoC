#!/bin/bash
# MCP Platform Installation Script
# Installs dependencies for all services with virtual environment support

set -e  # Exit on any error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if we're in CI environment
is_ci() {
    [ -n "${CI}" ] || [ -n "${GITHUB_ACTIONS}" ] || [ -n "${GITLAB_CI}" ] || [ -n "${JENKINS_URL}" ]
}

# Get the root directory of the project
ROOT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
VENV_SCRIPT="$ROOT_DIR/scripts/dev-venv.sh"

print_info "MCP Platform Installation Starting..."
print_info "Root directory: $ROOT_DIR"

# Check if the virtual environment script exists
if [ ! -f "$VENV_SCRIPT" ]; then
    print_error "Virtual environment script not found at $VENV_SCRIPT"
    exit 1
fi

# Make sure the script is executable
chmod +x "$VENV_SCRIPT"

# Define services and their paths
declare -a PYTHON_SERVICES=(
    "context-service:services/context-service"
    "text-summarization:services/text-summarization"
)

declare -a GO_SERVICES=(
    "auth-service:services/text-summarization/auth-service"
)

print_info "Installing Python services..."

# Install Python services using virtual environments
for service_info in "${PYTHON_SERVICES[@]}"; do
    IFS=':' read -r service_name service_path <<< "$service_info"
    
    print_info "Setting up $service_name..."
    
    # Check if service directory exists
    if [ ! -d "$ROOT_DIR/$service_path" ]; then
        print_warning "Service directory $service_path does not exist, skipping..."
        continue
    fi
    
    # Use the bootstrap script to setup the service
    cd "$ROOT_DIR"
    if "$VENV_SCRIPT" setup "$service_path" "$service_name"; then
        print_success "$service_name setup completed"
    else
        print_error "Failed to setup $service_name"
        exit 1
    fi
done

print_info "Installing Go services..."

# Install Go services
for service_info in "${GO_SERVICES[@]}"; do
    IFS=':' read -r service_name service_path <<< "$service_info"
    
    print_info "Setting up $service_name (Go service)..."
    
    # Check if service directory exists
    if [ ! -d "$ROOT_DIR/$service_path" ]; then
        print_warning "Service directory $service_path does not exist, skipping..."
        continue
    fi
    
    cd "$ROOT_DIR/$service_path"
    
    if go mod download && go mod tidy; then
        print_success "$service_name (Go) setup completed"
    else
        print_error "Failed to setup $service_name (Go)"
        exit 1
    fi
done

print_info "Setting up test environment..."

# Setup test environment
if [ -d "$ROOT_DIR/tests" ]; then
    cd "$ROOT_DIR"
    if "$VENV_SCRIPT" setup "tests" "tests"; then
        print_success "Test environment setup completed"
    else
        print_warning "Failed to setup test environment"
    fi
else
    print_warning "Tests directory not found, skipping test setup"
fi

cd "$ROOT_DIR"

print_success "MCP Platform installation completed successfully!"
print_info ""
print_info "Next steps:"
print_info "  1. To run context service: cd services/context-service && make run"
print_info "  2. To run text-summarization service: cd services/text-summarization && make run"
print_info "  3. To run auth service: cd services/text-summarization/auth-service && make run"
print_info "  4. To run tests: cd tests && pytest"
print_info ""
print_info "For development, each service now has its own virtual environment in .venv/"
print_info "Virtual environments are automatically activated when using make commands"

# Check if CI environment and provide additional info
if is_ci; then
    print_info "CI environment detected - services will use --break-system-packages fallback"
fi

print_info "Installation complete!"
