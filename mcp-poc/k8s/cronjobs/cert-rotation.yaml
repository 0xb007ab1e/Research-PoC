---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: cert-rotation
  namespace: default
  labels:
    app.kubernetes.io/name: cert-rotation
    app.kubernetes.io/component: security
    security.mcp.platform/cert-rotation: "true"
spec:
  # Run every day at 2 AM
  schedule: "0 2 * * *"
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      backoffLimit: 3
      activeDeadlineSeconds: 1800  # 30 minutes
      template:
        metadata:
          labels:
            app.kubernetes.io/name: cert-rotation
            app.kubernetes.io/component: security
        spec:
          restartPolicy: OnFailure
          serviceAccountName: cert-rotation
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
          containers:
          - name: cert-rotator
            image: gcr.io/distroless/static:nonroot
            command: ["/bin/cert-rotator"]
            env:
            - name: LOG_LEVEL
              value: "INFO"
            - name: CERT_RENEWAL_DAYS
              value: "30"
            - name: DRY_RUN
              value: "false"
            - name: VAULT_ADDR
              value: "https://vault.vault-system.svc.cluster.local:8200"
            - name: VAULT_TOKEN
              valueFrom:
                secretKeyRef:
                  name: cert-rotation-vault-token
                  key: token
            - name: VAULT_CA_CERT
              value: "/etc/vault-ca/ca.crt"
            # Services to rotate certificates for
            - name: SERVICES
              value: "auth-service,context-service,text-summarization"
            # Certificate types to check
            - name: CERT_TYPES
              value: "server,client"
            resources:
              requests:
                cpu: 100m
                memory: 128Mi
              limits:
                cpu: 200m
                memory: 256Mi
            securityContext:
              allowPrivilegeEscalation: false
              capabilities:
                drop:
                - ALL
              readOnlyRootFilesystem: true
            volumeMounts:
            - name: vault-ca
              mountPath: /etc/vault-ca
              readOnly: true
            - name: tmp
              mountPath: /tmp
            - name: cache
              mountPath: /home/nonroot/.cache
          volumes:
          - name: vault-ca
            secret:
              secretName: vault-ca-cert
              defaultMode: 0444
          - name: tmp
            emptyDir: {}
          - name: cache
            emptyDir: {}

---
# ServiceAccount for cert rotation job
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cert-rotation
  namespace: default
  labels:
    app.kubernetes.io/name: cert-rotation
    app.kubernetes.io/component: security

---
# ClusterRole for certificate management
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cert-rotation
  labels:
    app.kubernetes.io/name: cert-rotation
    app.kubernetes.io/component: security
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
  resourceNames: 
    - "auth-service-tls"
    - "context-service-tls" 
    - "text-summarization-tls"
    - "mcp-client-cert"
    - "mcp-ca-cert"
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get", "list", "patch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "delete"]

---
# ClusterRoleBinding for cert rotation
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cert-rotation
  labels:
    app.kubernetes.io/name: cert-rotation
    app.kubernetes.io/component: security
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cert-rotation
subjects:
- kind: ServiceAccount
  name: cert-rotation
  namespace: default

---
# Vault token secret for cert rotation job
apiVersion: v1
kind: Secret
metadata:
  name: cert-rotation-vault-token
  namespace: default
  labels:
    app.kubernetes.io/name: cert-rotation
    app.kubernetes.io/component: vault
type: Opaque
data:
  # Base64 encoded Vault token with cert management permissions
  token: czIuVGpHdW12OXRGaWFCUzVLc0ZoUXhCQWJh...
  role: Y2VydC1yb3RhdGlvbg==

---
# ConfigMap for certificate rotation script
apiVersion: v1
kind: ConfigMap
metadata:
  name: cert-rotation-script
  namespace: default
  labels:
    app.kubernetes.io/name: cert-rotation
    app.kubernetes.io/component: security
data:
  rotate-certs.sh: |
    #!/bin/bash
    set -euo pipefail
    
    # Configuration
    VAULT_ADDR="${VAULT_ADDR:-https://vault.vault-system.svc.cluster.local:8200}"
    CERT_RENEWAL_DAYS="${CERT_RENEWAL_DAYS:-30}"
    DRY_RUN="${DRY_RUN:-false}"
    SERVICES="${SERVICES:-auth-service,context-service,text-summarization}"
    
    # Function to check certificate expiry
    check_cert_expiry() {
        local cert_data="$1"
        local service_name="$2"
        
        # Decode base64 certificate
        echo "$cert_data" | base64 -d > /tmp/cert.pem
        
        # Get certificate expiry date
        expiry_date=$(openssl x509 -in /tmp/cert.pem -noout -enddate | cut -d= -f2)
        expiry_epoch=$(date -d "$expiry_date" +%s)
        current_epoch=$(date +%s)
        days_until_expiry=$(( (expiry_epoch - current_epoch) / 86400 ))
        
        echo "Certificate for $service_name expires in $days_until_expiry days"
        
        if [ $days_until_expiry -le $CERT_RENEWAL_DAYS ]; then
            echo "Certificate for $service_name needs renewal"
            return 0
        else
            echo "Certificate for $service_name is still valid"
            return 1
        fi
    }
    
    # Function to rotate certificate via Vault
    rotate_certificate() {
        local service_name="$1"
        local secret_name="${service_name}-tls"
        
        echo "Rotating certificate for $service_name..."
        
        if [ "$DRY_RUN" = "true" ]; then
            echo "DRY RUN: Would rotate certificate for $service_name"
            return 0
        fi
        
        # Request new certificate from Vault PKI
        response=$(curl -s \
            -H "X-Vault-Token: $VAULT_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{
                \"common_name\": \"${service_name}.default.svc.cluster.local\",
                \"alt_names\": \"${service_name},${service_name}.default\",
                \"ttl\": \"2160h\",
                \"format\": \"pem\"
            }" \
            "${VAULT_ADDR}/v1/pki/issue/mcp-platform")
        
        # Extract certificate components
        certificate=$(echo "$response" | jq -r '.data.certificate')
        private_key=$(echo "$response" | jq -r '.data.private_key')
        ca_chain=$(echo "$response" | jq -r '.data.ca_chain[]')
        
        # Base64 encode for Kubernetes secret
        cert_b64=$(echo "$certificate" | base64 -w 0)
        key_b64=$(echo "$private_key" | base64 -w 0)
        ca_b64=$(echo "$ca_chain" | base64 -w 0)
        
        # Update Kubernetes secret
        kubectl patch secret "$secret_name" \
            --type='json' \
            -p="[
                {\"op\": \"replace\", \"path\": \"/data/tls.crt\", \"value\": \"$cert_b64\"},
                {\"op\": \"replace\", \"path\": \"/data/tls.key\", \"value\": \"$key_b64\"},
                {\"op\": \"replace\", \"path\": \"/data/ca.crt\", \"value\": \"$ca_b64\"}
            ]"
        
        # Restart deployment to pick up new certificate
        kubectl rollout restart deployment "$service_name"
        
        echo "Certificate rotated successfully for $service_name"
    }
    
    # Main execution
    echo "Starting certificate rotation check..."
    
    IFS=',' read -ra SERVICE_ARRAY <<< "$SERVICES"
    for service in "${SERVICE_ARRAY[@]}"; do
        secret_name="${service}-tls"
        
        # Get current certificate from secret
        cert_data=$(kubectl get secret "$secret_name" -o jsonpath='{.data.tls\.crt}' 2>/dev/null || echo "")
        
        if [ -z "$cert_data" ]; then
            echo "Warning: Certificate secret $secret_name not found"
            continue
        fi
        
        # Check if certificate needs renewal
        if check_cert_expiry "$cert_data" "$service"; then
            rotate_certificate "$service"
        fi
    done
    
    echo "Certificate rotation check completed"
